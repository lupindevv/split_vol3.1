name: Build and Deploy to Azure VM

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  VM_HOST: ${{ secrets.VM_HOST }}
  VM_USERNAME: ${{ secrets.VM_USERNAME }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/splitbill-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/splitbill-backend:latest
          cache-to: type=inline

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/splitbill-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/splitbill-frontend:latest
          cache-to: type=inline

      - name: Image build summary
        run: |
          echo "🎉 Docker images built and pushed successfully!"

  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VM
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} << 'EOF'
            set -e
            
            echo "🚀 Starting deployment..."
            
            cd ~/splitbill-app
            
            echo "📥 Pulling new Docker images..."
            docker-compose pull
            
            echo "🔄 Restarting containers..."
            docker-compose up -d
            
            echo "⏳ Waiting for services to start..."
            sleep 15
            
            echo "📊 Container status:"
            docker-compose ps
            
            echo "🧹 Cleaning up old images..."
            docker image prune -af --filter "until=24h"
            
            echo "✅ Deployment completed successfully!"
          EOF

      - name: Health Check
        run: |
          echo "🏥 Performing health check..."
          sleep 10
          
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VM_HOST }} || echo "000")
            
            if [ "$RESPONSE" == "200" ] || [ "$RESPONSE" == "304" ]; then
              echo "✅ Application is healthy! (Status: $RESPONSE)"
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "⏳ Health check attempt $RETRY_COUNT/$MAX_RETRIES failed (Status: $RESPONSE). Retrying in 10 seconds..."
            sleep 10
          done
          
          echo "❌ Health check failed after $MAX_RETRIES attempts"
          exit 1

      - name: Deployment Summary
        if: success()
        run: |
          echo "======================================"
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo "======================================"
          echo "🐳 Backend: ${{ secrets.DOCKERHUB_USERNAME }}/splitbill-backend:latest"
          echo "🐳 Frontend: ${{ secrets.DOCKERHUB_USERNAME }}/splitbill-frontend:latest"
          echo "🌐 Application URL: http://${{ secrets.VM_HOST }}"
          echo "======================================"